{"version":3,"sources":["img/Activatr_logo_white.png","img/marks-logo.png","components/Header/Header.jsx","components/Dark-mode/Dark-mode.jsx","components/List/List.jsx","components/Compare/Compare.jsx","components/Display/Display.jsx","components/Size/Size.jsx","put-info-here.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","logo","team","name","src","aLogo","marksLogo","className","alt","DarkMode","toggleDarkMaode","darkMode","onClick","data-tooltip","List","useState","isdrawerOpen","setDrawerStatus","uList","toggleDarkmode","list","map","item","i","key","e","role","Compare","message","srcStat","isOlderAvailable","buildIframe","version","isOld","toggleSrc","oldSrc","frameBorder","scrolling","process","title","Display","isThisOldSrc","setThisSrc","togglePrevHidden","currentVersion","Size","size","versions","App","displayVersion","setDisplayVersion","isDarkModeOn","setDarkMode","toggleDarkMode","bodyClassList","document","body","classList","toggleBodyDark","remove","add","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d95f5519.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Activatr_logo_white.07ec248d.png\";","module.exports = __webpack_public_path__ + \"static/media/marks-logo.70013c35.png\";","import React from 'react';\nimport './header.css';\nimport aLogo from '../../img/Activatr_logo_white.png';\nimport marksLogo from '../../img/marks-logo.png'\n\nconst Header = (props) => {\n    let logo = '';\n    \n    switch(props.team){\n        case 'activatr':\n            logo = {\n                name: 'activatr',\n                src: aLogo\n            };\n            break;\n        case 'marks':\n            logo = {\n                name: 'marks',\n                src: marksLogo\n            };\n            break;\n        default: logo = {};\n    }\n\n    return (\n        <header>\n         <img className={logo.name + \"-logo\"} src={logo.src} alt={logo.name + \" logo\"} />  \n        </header>\n    )\n}\nexport default Header;","import React from 'react';\nimport './dark-mode.css';\n\nconst DarkMode = (props) => {\n    const toggleDarkMaode = (props.darkMode)? \"active\" : \"\";\n\n    return (\n    <button onClick={()=>props.onClick()} data-tooltip=\"Toggle Dark mode\" className={`dark-mode ${toggleDarkMaode}`}>Dark mode</button> \n    )\n}\n\nexport default DarkMode;","import React, { useState } from 'react';\nimport './list.css'\n\nconst List = (props) => {\n    const [isdrawerOpen, setDrawerStatus] = useState(false);\n    const uList = (isdrawerOpen)? \"open\" : \"\";\n    const handleButtonClick = () => setDrawerStatus(!isdrawerOpen);\n    const handleListClick = () => setDrawerStatus(false);\n    const toggleDarkmode = (props.darkMode)? \"dark\" : \"\";\n\n    const list = props.list.map((item, i) => {\n        return (<li key={i} onClick={(e)=>{handleListClick(); props.onClick(e,i); } } role=\"option\">{item.name}</li>)\n    })\n    \n    return(\n        <nav className={toggleDarkmode}>\n            <button onClick={()=>handleButtonClick()} className=\"version-list_toggle-button\">\n                Select Design <span className=\"version-list_toggle-indicator\">{(isdrawerOpen)? \"-\" : \"+\"}</span>\n            </button>\n            <ul className={`version-list ${uList}`} role=\"select\">\n                {list}\n            </ul>\n        </nav>\n    )\n}\n\nexport default List;\n;","import React from 'react';\nimport './compare.css'\n\nconst Compare = (props) => {\n    const message = (!props.srcStat)? \"View Previous\" : \"Back\"\n    const button = (props.isOlderAvailable)? (<button className=\"viewPrevious\" onClick={(e)=>props.onClick(e)}>{message}</button>) : \"\"\n\n    return (\n        button\n    )\n}\nexport default Compare;","import React, {useState} from 'react';\nimport './display.css';\nimport Compare from '../Compare/Compare';\n\nconst buildIframe = (version, isOld) => {\n    const toggleSrc = (version.oldSrc && isOld) ? version.oldSrc: version.src;\n    \n    return(\n        <div>\n            <iframe className=\"resp-iframe\" frameBorder=\"0\" scrolling=\"no\" src={process.env.PUBLIC_URL + toggleSrc} title=\"version\"></iframe>\n        </div>\n        )\n}\n\nconst Display = ({version}) => {\n    const [isThisOldSrc, setThisSrc] = useState((!version.oldSrc));\n    const togglePrevHidden = (version.oldSrc && isThisOldSrc) ? \"\": \"hidden\"\n    let currentVersion = buildIframe(version, isThisOldSrc);\n\n    const handleClick = () => { \n        setThisSrc(!isThisOldSrc)\n        currentVersion = buildIframe(version, isThisOldSrc)\n    }\n\n    return (\n        <div className=\"resp-container\">\n            <div className=\"resp-container__top\">\n                <h4 className=\"display__title\">{version.name} <span className={`isPrev ${togglePrevHidden}`}>(previous)</span></h4>\n                <Compare srcStat={isThisOldSrc} isOlderAvailable={(!!version.oldSrc)} onClick={handleClick}></Compare>\n            </div>\n            {currentVersion}\n        </div>\n        \n    )\n}\nexport default Display;","import React from 'react';\nimport './size.css';\n\nconst Size = (props) => {\n    return (\n        <footer>\n            <h3>{props.size}</h3>\n        </footer>\n    )\n}\n\nexport default Size;","export const project = \"Call of Duty Banners\"\nexport const team = \"marks\" //\"activatr\" or \"marks\";\n\n//Versions exist in the `./public/work` folder\n// structure {name, src, size, oldSrc}\nexport const versions = [ \n    {name:\"325708_300x250_pepsi\", src: \"/work/v1/index.html\", size:\"300 x 250\", oldSrc:\"/work/v2/index.html\" }, \n    {name:\"325708_400x250_pepsi\", src: \"/work/v2/index.html\", size:\"400 x 250\", oldSrc:\"\" },\n];\n\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport DarkMode from './components/Dark-mode/Dark-mode'\nimport List from './components/List/List';\nimport Display from './components/Display/Display';\nimport Size from './components/Size/Size';\nimport {versions, project, team} from './put-info-here';\n\n\nconst App = () => {\n  const [displayVersion, setDisplayVersion] = useState(versions[0]);\n  const [isDarkModeOn, setDarkMode] = useState(false);\n  const handleListClick = (e,i) => setDisplayVersion(versions[i])\n  const handleDarkModeClick = () => {\n    setDarkMode(!isDarkModeOn);\n    toggleBodyDark()\n  }\n  const toggleDarkMode = (isDarkModeOn)? \"dark\" : \"\";\n\n  const bodyClassList = document.body.classList;\n  const toggleBodyDark = () => {\n    (isDarkModeOn)? bodyClassList.remove('dark'): bodyClassList.add('dark') \n  }\n\n  return (\n    <div className={`App ${toggleDarkMode}`}>\n      <Header team={team}></Header>\n      <div className=\"resp\">\n        <List list={versions} onClick={handleListClick} darkMode={isDarkModeOn}/>\n        <main className=\"container\">\n          <DarkMode onClick={handleDarkModeClick} darkMode={isDarkModeOn}/>\n          <h2>{project}</h2>\n          <Display version={displayVersion} darkMode={isDarkModeOn}/>\n        </main>\n      </div>\n      <Size size={displayVersion.size}></Size>\n    </div>\n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}